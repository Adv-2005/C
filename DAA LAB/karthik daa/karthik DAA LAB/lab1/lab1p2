#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 5

// Adjacency list node
struct AdjListNode {
    int dest;
    struct AdjListNode* next;
};

// Adjacency list
struct AdjList {
    struct AdjListNode *head;
};

// Graph
struct Graph {
    int numVertices;
    struct AdjList* array;
};

// Function to create a new adjacency list node
struct AdjListNode* newAdjListNode(int dest) {
    struct AdjListNode* newNode = (struct AdjListNode*) malloc(sizeof(struct AdjListNode));
    newNode->dest = dest;
    newNode->next = NULL;
    return newNode;
}

// Function to create a graph of given vertices
struct Graph* createGraph(int numVertices) {
    struct Graph* graph = (struct Graph*) malloc(sizeof(struct Graph));
    graph->numVertices = numVertices;
    graph->array = (struct AdjList*) malloc(numVertices * sizeof(struct AdjList));
    for (int i = 0; i < numVertices; ++i) {
        graph->array[i].head = NULL;
    }
    return graph;
}

// Function to add an edge to an undirected graph
void addEdge(struct Graph* graph, int src, int dest) {
    struct AdjListNode* newNode = newAdjListNode(dest);
    newNode->next = graph->array[src].head;
    graph->array[src].head = newNode;

    newNode = newAdjListNode(src);
    newNode->next = graph->array[dest].head;
    graph->array[dest].head = newNode;
}

// Function to print the adjacency list representation of the graph
void printGraph(struct Graph* graph) {
    for (int v = 0; v < graph->numVertices; ++v) {
        struct AdjListNode* pCrawl = graph->array[v].head;
        printf("Adjacency list of vertex %d\n head ", v);
        while (pCrawl) {
            printf("-> %d", pCrawl->dest);
            pCrawl = pCrawl->next;
        }
        printf("\n");
    }
}

// Function to display adjacency matrix
void displayAdjacencyMatrix(int matrix[MAX_VERTICES][MAX_VERTICES], int numVertices) {
    printf("Adjacency Matrix:\n");
    for (int i = 0; i < numVertices; i++) {
        for (int j = 0; j < numVertices; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int numVertices = MAX_VERTICES;
    struct Graph* graph = createGraph(numVertices);

    addEdge(graph, 0, 1);
    addEdge(graph, 0, 4);
    addEdge(graph, 1, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 1, 4);
    addEdge(graph, 2, 3);
    addEdge(graph, 3, 4);

    printGraph(graph);

    int adjacencyMatrix[MAX_VERTICES][MAX_VERTICES] = {0};

    adjacencyMatrix[0][1] = 1;
    adjacencyMatrix[0][4] = 1;
    adjacencyMatrix[1][0] = 1;
    adjacencyMatrix[1][2] = 1;
    adjacencyMatrix[1][3] = 1;
    adjacencyMatrix[1][4] = 1;
    adjacencyMatrix[2][1] = 1;
    adjacencyMatrix[2][3] = 1;
    adjacencyMatrix[3][1] = 1;
    adjacencyMatrix[3][2] = 1;
    adjacencyMatrix[3][4] = 1;
    adjacencyMatrix[4][0] = 1;
    adjacencyMatrix[4][1] = 1;
    adjacencyMatrix[4][3] = 1;

    displayAdjacencyMatrix(adjacencyMatrix, numVertices);

    return 0;
}

